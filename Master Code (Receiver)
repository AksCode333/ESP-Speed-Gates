#include <ESP8266WiFi.h>
#include <espnow.h>

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
    int b;
    int c;
} struct_message;

// Create a struct_message called myData
struct_message myData;
bool started = false;
float ended_time = -1.0;
float start_time = 0;
// Callback function that will be executed when data is received
void OnDataRecv(uint8_t * mac, uint8_t *incomingData, uint8_t len) {
  memcpy(&myData, incomingData, sizeof(myData));
  // Serial.print("Bytes received: ");
  // Serial.println(len);
  // Serial.print("Char: ");
  // Serial.println(myData.a);
  // Serial.print("NODE: ");
  // Serial.print(myData.c);
  // Serial.print(" Distance: ");
  // Serial.print(myData.b);
  // Serial.print(" TIME: ");
  // Serial.println(micros()/ 1000000.0);
  if(myData.c == 0 && myData.b < 100 && started == false) {
    started = true;
    start_time = (micros()/ 1000000.0);
  }
  if(myData.c == 1 && myData.b > -1.0 && started == true){
    ended_time = (micros()/ 1000000.0);
  }
  display_information();
  // Display static text
  
  // Serial.print("Float: ");
  // Serial.println(myData.c);
  // Serial.print("String: ");
  // Serial.println(myData.d);
  // Serial.print("Bool: ");
  // Serial.println(myData.e);
  // Serial.println();
}
void display_information() {
  // PUTTING INFORMATION ONTO THE DISPLAY
  display.clearDisplay();
  if(myData.c == 0){
    display.setCursor(0, 0);
    display.println("---------");
    display.println(" | Start | ");
    display.println("---------");
   }// else {
  //   display.println("-------------");
  //   display.println("| END |");
  //   display.println("-------------");
  // }
}
 
void setup() {

  // Initialize Serial Monitor
  Serial.begin(115200);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.clearDisplay();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  // Display static text
  display.println("Ari Aks's\nSpeedGates");
  // display.setTextSize(1);
  display.display(); 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_set_self_role(ESP_NOW_ROLE_SLAVE);
  esp_now_register_recv_cb(OnDataRecv);

}


void loop() {
  display.display();
  if (ended_time > -1 && started == true){
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("RUN TIME: ");
    display.print(ended_time - start_time);
    display.println("secs");
    display.display();
    delay(5000);
    started = false;
    ended_time = -1.0;
    start_time = 0;
  
  }
}
